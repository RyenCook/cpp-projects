		  _____  __    __    ___      ___                        
		 / ___/_/ /___/ /_  / _ \___ / _/__ _______ ___  _______ 
		/ /__/_  __/_  __/ / , _/ -_) _/ -_) __/ -_) _ \/ __/ -_)
		\___/ /_/   /_/   /_/|_|\__/_/ \__/_/  \__/_//_/\__/\__/ 
  
					by Ryan Cook~
>
This is a tentative reference based upon my own personal knowledge of the language and
as such should not be taken to be word, it is an ever changing personal reference for 
when I need it.
<

======================================================================================
CONTENTS

	0. Comments
		0a. Line comments
		0b. Block comments
	1. Variables
		1a. Data types
		1b. typedef
		1c. Data scope
		1d. Constants/Literals
		1e. Modifiers
		1f. Storage
	2. Operators
		2a. Arithmetic Operators
		2b. Relational Operators
		2c. Logical Operators
		2d. Bitwise Operators
		2e. Assignment Operators
		2f. Miscellaneous Operators
		2g. Operator Precedence
	3. Loops
		3a. For
		3b. While
		3c. Do...While
	4. Decision making
		4a. If...Else
		4b. Switch
		4c. Ternary Operator
	5. Functions
		5a. Function Definition
		5b. Function Declaration
		5c. Calling a Function
		5d. Function Parameters
	6. Arrays
		6a. Finding Size of an Array
		6b. Multi-Dimensional Arrays
		6c. Finding size of a Multi-Dimensional Array
	7. Pointers & References
		7a. Pointers vs Arrays
	8. Classes & Objcets
		8a. Inheritance
	9. Headers
	10. Namespaces
	11. Templates
	12. Preprocessor?

======================================================================================
0. COMMENTS

Comments in C++ are just like those in Java, they denote what as statement does or lea
ves notes for future reference.

	0a.	Line Comments

	Denoted by // in a code, anything after this on a given line is ignored.

	// This an example quote

	0b.	Block Comments

	Denoted by /* */ in code, anything in between the stars (on multiple lines) is
	ignored.

	/* This is a
	 * multi-line comment!
	 */

======================================================================================
1. VARIABLES

Variables are nothing more than reserved memory locations to store variables

	1a. Data Types

	In C++ there are 7 primitive data types, they are:
	- Boolean (bool): True/False
	- Character (char): Letter (ie 'A')
	- Integer (int): Whole number
	- Floating point (float): Decimal
	- Double floating point (double): Decimal
	- "Valueless" (void): ???
	- Wide Character (wchar_t): Unicode symbol

	Each of the data types occupies a different amount of space in memory;
	- char: 1byte
	- int: 4bytes
	- float: 4bytes
	- double: 8bytes
	- wchar_t: 2/4bytes
	
	1b. typedef

	It is possible to create an alias to an existing data type using typedef

	typedef type newname;

	So, for instance typedef int feet alias "feet" and "int", so 'feet distance;'
	would be the same as 'int distance;'

	1c. Data Scope

	Data scope refers to the "scope" of a program, with the three being:
	- Local: Within a function/block
	- Parameters: Within a function parameters
	- Global: Outside of all functions/blocks

	1d. Constants/Literals

	Constants = Literals. Literals are values that cannot be chanced
	- Integer literals compose of a decimal, octal (0 prefix) or hexadecimal (0x p
	  refix)
	- Floating-point literals consist of an integral part, decimal part, a fractio
	  nal part and an exponent part (3.14159, 314159E-5L)
	- Boolean literals consit of "true" (1) or "false" (0)
	- Character literals can be a narrow character (ascii), and escape sequence (/
	  t) or an universal character (\u02c0). Wide characters (unicode) are stored 
	  in a wchar_t
	- String literal are any character literals encapsulated by ""

	Escape sequences:
	- \\ (\)
	- \' (')
	- \" (")
	- \? (?)
	- \a (alert)
	- \b (backspace)
	- \f (form feed)
	- \n (newline)
	- \r (carriage return)
	- \t (horizontal tab)
	- \v (vertical tab)

	Constants can be defined by either the 'const' keyword or the '#define' prepro
	cessor.

	const type name = value;
	#define name value

	1e. Modifiers

	'char', 'int' and 'double'  may have modifiers preceeding them, such as
	- signed (allows +/-): int, char
	- unsigned (+ only): int, char
	- long (doubles memory allocation): int, double
	- short (halves memory allocation): int

	Other miscellaneous modifeirs are 'const' (unchanging), 'volatile' (may change
	in unexpected ways) and 'restrict' (the only means by which the object it poin
	ts to can be accessed).

	1e. Storage Classes

	Storage classes can alter the scope (visibility) and life-time of variables (a
	nd functions, they are:
	- auto: default loaded by local objects
	- register: "suggestion" to store object in a register
	- static: one shared instance among all instances of aclass
	- extern: gives reference to a global variable elsewhere (or external)
	- mutable: ability to override a const member function

======================================================================================
2. OPERATORS

Operators are symbols that tells the compiler to perform a specifc mathematical or log
ical manipulations. The available operators are:

- Arithmetic (math)
- Relational (comparing)
- logical (gates)
- bitwise (bit-based operations)
- assignment (assigns a value)
- miscellaneous

Each operator has a unique purpose as described below:

	2a. Arithmetic Operators

	Perform mathematical operations on variables.
	- + (adds)
	- - (subtracts)
	- * (multiplies)
	- / (divides)
	- % (modulus/remainder)
	- ++ (increments by one)
	- -- (decrements by one)

	2b. Relational Operators

	Compares given values.
	- == (equals)
	- != (not equals)
	- > (less than)
	- < (greater than)
	- >= (less than or equal too)
	- <= (greater than or equal too)

	2c. Logical Operators

	Basically logic gates.
	- && (AND)
	- || (OR)
	- ! (NOT)

	2d. Bitwise Operators

	Perform operations on the actual bits
	- & (Binary AND, copies a bit into the result if it exists in both operands)
	- | (Binary OR, copies a bit if it exists in either operand)
	- ^ (Binar XOR, copies abit if it exists in only one operand)
	- ~ (Binary Ones Complement, inverts bits)
	- << (Binary left shift, shifts all the bits left by the given parameter)
	- >> (Binary right sift, shifts all the bits right by the given parameter)

	2e. Assignment Operators

	Assigns values.
	- = (this equals that)
	- += (plus equals)
	- -= (minus equals)
	- *= (multiply equals)
	- /= (divide equals)
	- &= (remainder equals)
	- <<= (shift left then equals)
	- >>= (shift right then equals)
	- &= (bitwise AND assign)
	- ^= (bitwise XOR assign)
	- |= (bitwise OR assign)

	2f. Miscellaneous operators

	Operators that dont fit anywhere else.
	- sizeof (returns memory size)
	- ?: (ternary)
	- , (comma operator, a series of expressions are performed and assignment is m
	 made at the final step)
	- . or -> (member operator)
	- (type) (casting)
	- & (pointer to memory address)
	- * (pointer to variable)

	2g. Operator Precedence

	Operators have an order of precedence in which they will be interpretted:
	1. Postfix - () [] -> , ++ --
	2. Unary + - ! ~ ++ -- (type) * & sizeof
	3. Multiplicative * / %
	4. Additive + -
	5. Shift << >>
	6. Relation < <= > >=
	7. Equality == !=
	8. Bitwise AND &
	9. Bitwise XOR ^
	10. Bitwise OR |
	11. Logical AND &&
	12. Logical OR ||
	13. Conditional ?:
	14. Assignment = += -= *= /= %= >>= <<= &= ^= |=
	15. Comma ,

======================================================================================
LOOPS

Sometimes you may need to execute the same block of code multiple times, that is what 
loops are for.

	3a. For Loop

	The For loop is a loop that runs 'for' a specified number of times, it's syntax
	is:

	for(int i=0; i < max; i++) {
		/* statements */
	}

	3b. While Loop

	The while loop is a loop that runs until a condition that is met, with that co
	nditional being checked at the start of the loop. It's syntax is: 

	while(condition) {
		/ * statements */
	}

	3c. Do...While Loop

	Almost exactly the same as a while loop, but checks the condition at the end o
	f the loop. It's syntax is:

	do {
		/* statements */
	} while(condition);

======================================================================================
DECISION MAKING

Sometimes a program will need to make a decision based upon an condition, that is why 
c++ has decision-making statements built into it.

	4a. If...Else
	
	Exactly as described, if this than this, else do this. The syntax is:

	if(condition) {
		/* statements */
	}else{
		/* statements */
	}

	4b. Switch

	Another type of decision making is the switch. The switch allows for multiple 
	testing of various test cases based upon a given input (usually a number, lett
	er or string, things more complex than a true or false). The syntax is:

	switch(expression) {
		case constant-expression:
			/* statements */
			break;
		case constant-expressionL
			/* statements */
			break;
		case default:
			/* statements */
	}

	4c. Ternary Operators

	Utilizing the ternary operator it is possible to condense and if...else statem
	ment into a single assignment line, for example:

	int c = (a>b)?a:b;

	This means that "if a > b is true (?)" set c = a, "else (:)" set c = b;



======================================================================================
FUNCTIONS

Functions are groups of statements that work together to achieved a desired goal.

	5a. Function Definitions

	The general form of a function definition is:

	return_type function_name(parameter list) {
		/* body statements */
	}

	5b. Function Declerations

	Functions can also be declared while worrying about implemnetation later, that
	is done by:

	return_type function)name(parameter list);

	5c. Calling a Function

	To actually utilize a function one must first call it, that is done by:

	function_name(parameters);

	5d. Function Parameters

	Functions can be passed parameters to modify their behavior, this is done by s
	pecifying a data-type for the parameter and passing it one of the correspondin
	g type, for example:

	int add(int a, int b) {
		return (a+b);
	}

======================================================================================
6. ARRAYS

Arrays are essentially a list of a certain data-type. They have a fixed size and start at 0.

Arrays can be formatted as so: 

data_type array_name[size];
data_type array_name[] = {object1, object2, object3}; // Will automatically size array

	6a. Find Size of an Array

	To find the size of an array we can use the sizeof operator. While it doesnt a
	actually give us the size of the array it does allow us to do some math. You s
	ee future me, sizeof returns the size of the object in question in bytes, and
	by dividing that value by the sizeof any given element whe should be able to c
	alculate the size, for example.

	int arr[4] = {1, 2, 3, 4};

	int sizeOfArr = sizeof(arr)/sizeof(arr[0]) 

	Now sizeof(arr) returns 32 bytes, and sizeof(arr[1]) returns 4 bytes. So 32/4 
	= 4, which is the size of the array.

	6b. Multi-Dimensional Arrays

	Much like the arrays dealt with in math, array's can be multi-dimensional (usu
	ally 2D or 3D).

	Multi-dimensional arrays are declare as such:

	data_type array_name[size_y][size_x];

	or in the automatic way (NOTE: First dimension must always be defined)

	data_type array_name[2][] = {{obj1, obj2, obj3}, {obj4, obj5, obj6}};

	6c. Find Size of a Multi-Dimensional Array

	To find the size of a multi-dimensional array, one must treat it like an array
	of arrays, so by finding the size of the rows (arrays) and the size of the co
	lumns (array of arrays) can one find the size of a multi-dimensional array.

	int arr[2][] = {{1,2,3,4}, {5,6,7,8}};

	int row = sizeof(arr)/sizeof(arr[0]);
	int col = sizeof(arr[0])/sizeof([0][0]);
	
======================================================================================
7. POINTERS
